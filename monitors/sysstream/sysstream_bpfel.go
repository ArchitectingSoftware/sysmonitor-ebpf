// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package sysstream

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadSysstream returns the embedded CollectionSpec for sysstream.
func loadSysstream() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_SysstreamBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load sysstream: %w", err)
	}

	return spec, err
}

// loadSysstreamObjects loads sysstream and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*sysstreamObjects
//	*sysstreamPrograms
//	*sysstreamMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadSysstreamObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadSysstream()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// sysstreamSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sysstreamSpecs struct {
	sysstreamProgramSpecs
	sysstreamMapSpecs
}

// sysstreamSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sysstreamProgramSpecs struct {
	SysExit *ebpf.ProgramSpec `ebpf:"sys_exit"`
}

// sysstreamMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sysstreamMapSpecs struct {
	NamespaceTable *ebpf.MapSpec `ebpf:"namespace_table"`
	SyscallTable   *ebpf.MapSpec `ebpf:"syscall_table"`
}

// sysstreamObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadSysstreamObjects or ebpf.CollectionSpec.LoadAndAssign.
type sysstreamObjects struct {
	sysstreamPrograms
	sysstreamMaps
}

func (o *sysstreamObjects) Close() error {
	return _SysstreamClose(
		&o.sysstreamPrograms,
		&o.sysstreamMaps,
	)
}

// sysstreamMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadSysstreamObjects or ebpf.CollectionSpec.LoadAndAssign.
type sysstreamMaps struct {
	NamespaceTable *ebpf.Map `ebpf:"namespace_table"`
	SyscallTable   *ebpf.Map `ebpf:"syscall_table"`
}

func (m *sysstreamMaps) Close() error {
	return _SysstreamClose(
		m.NamespaceTable,
		m.SyscallTable,
	)
}

// sysstreamPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadSysstreamObjects or ebpf.CollectionSpec.LoadAndAssign.
type sysstreamPrograms struct {
	SysExit *ebpf.Program `ebpf:"sys_exit"`
}

func (p *sysstreamPrograms) Close() error {
	return _SysstreamClose(
		p.SysExit,
	)
}

func _SysstreamClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed sysstream_bpfel.o
var _SysstreamBytes []byte
